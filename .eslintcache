[{"D:\\reactjs\\quiz-app\\src\\index.js":"1","D:\\reactjs\\quiz-app\\src\\App.js":"2","D:\\reactjs\\quiz-app\\src\\reportWebVitals.js":"3","D:\\reactjs\\quiz-app\\src\\data.js":"4","D:\\reactjs\\quiz-app\\src\\Timer.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":4614,"mtime":1612338823111,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1750,"mtime":1612277120353,"results":"10","hashOfConfig":"7"},{"size":944,"mtime":1612337252940,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"5y7v8x",{"filePath":"15","messages":"16","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\reactjs\\quiz-app\\src\\index.js",[],["25","26"],"D:\\reactjs\\quiz-app\\src\\App.js",["27","28","29","30","31","32","33"],"import logo from \"./logo.svg\";\nimport data from \"./data\";\nimport produce from \"immer\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { useTimer } from \"use-timer\";\nimport Moment from \"react-moment\";\nimport Timer from \"./Timer\";\n\nfunction App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [questions, setQuestions] = useState(data);\n  const [showScore, setShowScore] = useState(false);\n  const [showQuestionare, setShowQuestionare] = useState(false);\n  const [score, setScore] = useState(0);\n  const { time, start, pause, reset, status } = useTimer({\n    initialTime: 80,\n    endTime: 0,\n    timerType: \"DECREMENTAL\",\n  });\n\n  const handleAnswerButtonClick = (option, index) => {\n    //console.log(index);\n    const questionsNew = [...questions];\n    const nextState = produce(questionsNew, (draftState) => {\n      draftState[currentQuestion].answerOptions.map(\n        (x) => (x.isSelected = false)\n      );\n      draftState[currentQuestion].answerOptions[index].isSelected = true;\n    });\n    setQuestions(nextState);\n  };\n\n  const handleNext = (current) => {\n    if (isAnswerSelected(questions[currentQuestion])) {\n      setCurrentQuestion(\n        currentQuestion < questions.length - 1\n          ? currentQuestion + 1\n          : currentQuestion\n      );\n    }\n  };\n  const isAnswerSelected = (answers) => {\n    //if any one is true return true;\n    return answers.answerOptions.some((x) => x.isSelected === true);\n  };\n\n  const handleSubmitclick = () => {\n    if (isAnswerSelected(questions[currentQuestion])) {\n      setScore(calculateScore());\n      setShowScore(true);\n    }\n  };\n\n  const calculateScore = () => {\n    let totalScore = 0;\n    questions.map((d) =>\n      d.answerOptions.map((a) => {\n        if (a.isCorrect && a.isSelected) totalScore += d.score;\n      })\n    );\n    return totalScore;\n  };\n  const handleTimerEnd = () => {\n    setScore(calculateScore());\n    setShowScore(true);\n  };\n\n  const handleStart = () => {\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setQuestions(data);\n    setShowQuestionare(true);\n    start({ endtime: 5 });\n  };\n  return (\n    <div className=\"App\">\n      <p>\n        Elapsed time:\n        {/* <Moment format=\"HH:mm:ss\">{time}</Moment>{\" \"} */}\n      </p>\n\n      {showQuestionare === false ? (\n        <button onClick={() => handleStart()}>Start</button>\n      ) : (\n        <div>\n          {showScore ? (\n            <div className=\"score-section\">\n              You scored {score} out of{\" \"}\n              {questions.reduce(\n                (accumulator, current) => accumulator + current.score,\n                0\n              )}\n              <button onClick={() => handleStart()}>Start Again</button>\n            </div>\n          ) : (\n            <>\n              <Timer\n                initialMinute={questions.length - 3}\n                initialSeconds={0}\n                onTimerEnd={handleTimerEnd}\n              />\n              <div className=\"question-section\">\n                <div className=\"question-count\">\n                  <span>Question {currentQuestion + 1}</span>/{questions.length}\n                </div>\n                <div className=\"question-text\">\n                  {questions[currentQuestion].questionText}\n                </div>\n              </div>\n              <div className=\"answer-section\">\n                {questions[currentQuestion].answerOptions.map(\n                  (option, index) => (\n                    <button\n                      onClick={() => handleAnswerButtonClick(option, index)}\n                      className={`button-style${\n                        option.isSelected === true ? \" button-hover\" : \"\"\n                      }`}\n                      key={index}\n                    >\n                      {option.answerText}\n                    </button>\n                  )\n                )}\n              </div>\n              <div>\n                <button\n                  onClick={() =>\n                    setCurrentQuestion(\n                      currentQuestion > 0\n                        ? currentQuestion - 1\n                        : currentQuestion\n                    )\n                  }\n                >\n                  Prev\n                </button>\n                {currentQuestion === questions.length - 1 ? (\n                  <button onClick={() => handleSubmitclick()}>Submit</button>\n                ) : (\n                  <button onClick={() => handleNext()}>Next</button>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","D:\\reactjs\\quiz-app\\src\\reportWebVitals.js",[],"D:\\reactjs\\quiz-app\\src\\data.js",["34"],"export default   [\r\n    {\r\n        questionText: 'What is the capital of France?',\r\n       score:1.5,\r\n        answerOptions: [\r\n            { answerText: 'New York', isSelected: false, isCorrect: false },\r\n            {answerText: 'London', isSelected: false, isCorrect: false },\r\n            {answerText: 'Paris', isSelected: false, isCorrect: true },\r\n            {answerText: 'Dublin', isSelected: false, isCorrect: false },\r\n        ],\r\n    },\r\n    {\r\n        questionText: 'Who is CEO of Tesla?',\r\n        score:1,\r\n        answerOptions: [\r\n            { answerText: 'Jeff Bezos', isSelected: false, isCorrect: false },\r\n            { answerText: 'Elon Musk',  isSelected: false, isCorrect: true },\r\n            { answerText: 'Bill Gates', isSelected: false, isCorrect: false },\r\n            { answerText: 'Tony Stark', isSelected: false, isCorrect: false },\r\n        ],\r\n    },\r\n    {\r\n        questionText: 'The iPhone was created by which company?',\r\n        score:1,\r\n        answerOptions: [\r\n            { answerText: 'Apple', isSelected: false, isCorrect: true },\r\n            { answerText: 'Intel', isSelected: false, isCorrect: false },\r\n            { answerText: 'Amazon', isSelected: false, isCorrect: false },\r\n            { answerText: 'Microsoft', isSelected: false, isCorrect: false },\r\n        ],\r\n    },\r\n    {\r\n        questionText: 'How many Harry Potter books are there?',\r\n        score:1,\r\n        answerOptions: [\r\n            { answerText: '1', isSelected: false, isCorrect: false },\r\n            { answerText: '4', isSelected: false, isCorrect: false },\r\n            { answerText: '6', isSelected: false, isCorrect: false },\r\n            { answerText: '7', isSelected: false, isCorrect: true },\r\n        ],\r\n    },\r\n];","D:\\reactjs\\quiz-app\\src\\Timer.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":7,"column":8,"nodeType":"41","messageId":"42","endLine":7,"endColumn":14},{"ruleId":"39","severity":1,"message":"44","line":16,"column":11,"nodeType":"41","messageId":"42","endLine":16,"endColumn":15},{"ruleId":"39","severity":1,"message":"45","line":16,"column":24,"nodeType":"41","messageId":"42","endLine":16,"endColumn":29},{"ruleId":"39","severity":1,"message":"46","line":16,"column":31,"nodeType":"41","messageId":"42","endLine":16,"endColumn":36},{"ruleId":"39","severity":1,"message":"47","line":16,"column":38,"nodeType":"41","messageId":"42","endLine":16,"endColumn":44},{"ruleId":"48","severity":1,"message":"49","line":58,"column":31,"nodeType":"50","messageId":"51","endLine":58,"endColumn":33},{"ruleId":"52","severity":1,"message":"53","line":1,"column":1,"nodeType":"54","endLine":42,"endColumn":3},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Moment' is defined but never used.","'time' is assigned a value but never used.","'pause' is assigned a value but never used.","'reset' is assigned a value but never used.","'status' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]